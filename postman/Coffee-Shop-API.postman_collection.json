{
  "info": {
    "name": "Coffee Shop API",
    "description": "Complete API collection for Coffee Shop Management System with Virtual Threads",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login as Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', jsonData.accessToken);",
                  "    console.log('JWT Token saved:', jsonData.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@local\",\n  \"password\": \"Admin#123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with admin credentials to get JWT token"
          },
          "response": []
        },
        {
          "name": "Login as User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', jsonData.accessToken);",
                  "    console.log('JWT Token saved:', jsonData.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@local\",\n  \"password\": \"User#123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with regular user credentials"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('product_id', jsonData.id);",
                  "    console.log('Product ID saved:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Iced Latte\",\n  \"sku\": \"COFFEE-ICE-LAT-001\",\n  \"price\": 4.50,\n  \"initialStock\": 75\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/products",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products"]
            },
            "description": "Create a new product (requires ADMIN role)"
          },
          "response": []
        },
        {
          "name": "Get All Products",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/products?page=0&size=20&sort=name,asc",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                },
                {
                  "key": "sort",
                  "value": "name,asc"
                }
              ]
            },
            "description": "Get all products with pagination"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}"]
            },
            "description": "Get a specific product by ID"
          },
          "response": []
        },
        {
          "name": "Restock Product",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}/restock",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}", "restock"]
            },
            "description": "Add inventory to a product (requires ADMIN role)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('order_id', jsonData.id);",
                  "    console.log('Order ID saved:', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"c0000000-0000-0000-0000-000000000001\",\n      \"quantity\": 2\n    },\n    {\n      \"productId\": \"c0000000-0000-0000-0000-000000000003\",\n      \"quantity\": 1\n    },\n    {\n      \"productId\": \"c0000000-0000-0000-0000-000000000006\",\n      \"quantity\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "orders"]
            },
            "description": "Create a new order with multiple items (uses Virtual Threads with Structured Concurrency)"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "orders", "{{order_id}}"]
            },
            "description": "Get a specific order by ID"
          },
          "response": []
        },
        {
          "name": "Get All Orders (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/orders?page=0&size=20&sort=createdAt,desc",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "orders"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                },
                {
                  "key": "sort",
                  "value": "createdAt,desc"
                },
                {
                  "key": "status",
                  "value": "CREATED",
                  "disabled": true
                },
                {
                  "key": "dateFrom",
                  "value": "2024-01-01T00:00:00Z",
                  "disabled": true
                },
                {
                  "key": "dateTo",
                  "value": "2024-12-31T23:59:59Z",
                  "disabled": true
                }
              ]
            },
            "description": "Get all orders with filtering (requires ADMIN role)"
          },
          "response": []
        },
        {
          "name": "Pay Order",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/orders/{{order_id}}/pay",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "orders", "{{order_id}}", "pay"]
            },
            "description": "Process payment for an order (decreases stock)"
          },
          "response": []
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/orders/{{order_id}}/cancel",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "orders", "{{order_id}}", "cancel"]
            },
            "description": "Cancel an order (restores stock if already paid)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Actuator",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/health",
              "host": ["{{base_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check application health status"
          },
          "response": []
        },
        {
          "name": "Metrics",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/metrics",
              "host": ["{{base_url}}"],
              "path": ["actuator", "metrics"]
            },
            "description": "Get available metrics"
          },
          "response": []
        },
        {
          "name": "Prometheus Metrics",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/prometheus",
              "host": ["{{base_url}}"],
              "path": ["actuator", "prometheus"]
            },
            "description": "Get Prometheus-formatted metrics"
          },
          "response": []
        }
      ]
    }
  ]
}
